import React, { useState } from 'react';
import { FiDownload, FiCode, FiFileText, FiImage, FiCopy } from 'react-icons/fi';
import { toast } from 'react-hot-toast';

export default function ExportPanel({ colors, palettes }) {
  const [exportFormat, setExportFormat] = useState('json');
  const [exportName, setExportName] = useState('');

  const generateExportData = () => {
    const timestamp = new Date().toISOString();
    const name = exportName.trim() || `palette-${timestamp.split('T')[0]}`;
    
    return {
      name,
      colors,
      timestamp,
      totalColors: colors.length,
      exportFormat,
      version: '1.0'
    };
  };

  const exportAsJSON = () => {
    const data = generateExportData();
    const jsonString = JSON.stringify(data, null, 2);
    downloadFile(jsonString, `${data.name}.json`, 'application/json');
    toast.success('JSON file exported successfully!');
  };

  const exportAsCSS = () => {
    const data = generateExportData();
    let cssContent = `/* ${data.name} - Generated by Figma Palette Extension */\n`;
    cssContent += `/* Exported on: ${new Date().toLocaleString()} */\n\n`;
    
    colors.forEach((color, index) => {
      cssContent += `--color-${index + 1}: ${color};\n`;
    });
    
    cssContent += `\n/* Usage Example: */\n`;
    cssContent += `.element {\n`;
    cssContent += `  background-color: var(--color-1);\n`;
    cssContent += `  color: var(--color-2);\n`;
    cssContent += `}\n`;
    
    downloadFile(cssContent, `${data.name}.css`, 'text/css');
    toast.success('CSS file exported successfully!');
  };

  const exportAsSCSS = () => {
    const data = generateExportData();
    let scssContent = `// ${data.name} - Generated by Figma Palette Extension\n`;
    scssContent += `// Exported on: ${new Date().toLocaleString()}\n\n`;
    
    scssContent += `$palette: (\n`;
    colors.forEach((color, index) => {
      scssContent += `  "color-${index + 1}": ${color}${index < colors.length - 1 ? ',' : ''}\n`;
    });
    scssContent += `);\n\n`;
    
    scssContent += `// Usage Example:\n`;
    scssContent += `.element {\n`;
    scssContent += `  background-color: map-get($palette, "color-1");\n`;
    scssContent += `  color: map-get($palette, "color-2");\n`;
    scssContent += `}\n`;
    
    downloadFile(scssContent, `${data.name}.scss`, 'text/x-scss');
    toast.success('SCSS file exported successfully!');
  };

  const exportAsASE = () => {
    // Adobe Swatch Exchange format (simplified)
    const data = generateExportData();
    let aseContent = `Adobe Swatch Exchange\n`;
    aseContent += `Version: 1.0\n`;
    aseContent += `Name: ${data.name}\n`;
    aseContent += `Colors: ${colors.length}\n\n`;
    
    colors.forEach((color, index) => {
      const rgb = hexToRgb(color);
      if (rgb) {
        aseContent += `Color ${index + 1}:\n`;
        aseContent += `  RGB: ${rgb.r}, ${rgb.g}, ${rgb.b}\n`;
        aseContent += `  HEX: ${color}\n`;
        aseContent += `  Name: Color ${index + 1}\n\n`;
      }
    });
    
    downloadFile(aseContent, `${data.name}.ase`, 'text/plain');
    toast.success('ASE file exported successfully!');
  };

  const exportAsTXT = () => {
    const data = generateExportData();
    let txtContent = `${data.name} - Color Palette\n`;
    txtContent += `Generated on: ${new Date().toLocaleString()}\n`;
    txtContent += `Total Colors: ${colors.length}\n`;
    txtContent += `='.repeat(50)}\n\n`;
    
    colors.forEach((color, index) => {
      txtContent += `${index + 1}. ${color}\n`;
    });
    
    txtContent += `\nColor Information:\n`;
    colors.forEach((color, index) => {
      const rgb = hexToRgb(color);
      if (rgb) {
        txtContent += `${index + 1}. ${color} - RGB(${rgb.r}, ${rgb.g}, ${rgb.b})\n`;
      }
    });
    
    downloadFile(txtContent, `${data.name}.txt`, 'text/plain');
    toast.success('Text file exported successfully!');
  };

  const copyToClipboard = async () => {
    const data = generateExportData();
    let content = '';
    
    switch (exportFormat) {
      case 'json':
        content = JSON.stringify(data, null, 2);
        break;
      case 'css':
        content = colors.map((color, index) => `--color-${index + 1}: ${color};`).join('\n');
        break;
      case 'scss':
        content = colors.map((color, index) => `"color-${index + 1}": ${color}`).join(',\n  ');
        break;
      case 'txt':
        content = colors.join('\n');
        break;
      default:
        content = colors.join(', ');
    }
    
    try {
      await navigator.clipboard.writeText(content);
      toast.success(`${exportFormat.toUpperCase()} copied to clipboard!`);
    } catch (error) {
      toast.error('Failed to copy to clipboard');
    }
  };

  const downloadFile = (content, filename, mimeType) => {
    const blob = new Blob([content], { type: mimeType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = filename;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);
  };

  const hexToRgb = (hex) => {
    const result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
    return result ? {
      r: parseInt(result[1], 16),
      g: parseInt(result[2], 16),
      b: parseInt(result[3], 16)
    } : null;
  };

  const handleExport = () => {
    switch (exportFormat) {
      case 'json':
        exportAsJSON();
        break;
      case 'css':
        exportAsCSS();
        break;
      case 'scss':
        exportAsSCSS();
        break;
      case 'ase':
        exportAsASE();
        break;
      case 'txt':
        exportAsTXT();
        break;
      default:
        toast.error('Invalid export format');
    }
  };

  if (colors.length === 0) {
    return (
      <div className="export-panel">
        <h3>Export Palette</h3>
        <p style={{ color: '#6c757d', textAlign: 'center', padding: '20px' }}>
          Select colors to export your palette
        </p>
      </div>
    );
  }

  return (
    <div className="export-panel">
      <h3>Export Palette</h3>
      
      <div style={{ marginBottom: '16px' }}>
        <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500' }}>
          Export Name:
        </label>
        <input
          type="text"
          value={exportName}
          onChange={(e) => setExportName(e.target.value)}
          placeholder="Enter palette name"
          style={{
            width: '100%',
            padding: '8px 12px',
            border: '1px solid #dee2e6',
            borderRadius: '6px',
            fontSize: '14px'
          }}
        />
      </div>

      <div style={{ marginBottom: '16px' }}>
        <label style={{ display: 'block', marginBottom: '8px', fontWeight: '500' }}>
          Export Format:
        </label>
        <div className="export-options">
          <div className="export-option" onClick={() => setExportFormat('json')}>
            <FiCode style={{ color: exportFormat === 'json' ? '#667eea' : '#6c757d' }} />
            <span style={{ color: exportFormat === 'json' ? '#667eea' : '#1a1a1a' }}>JSON</span>
          </div>
          <div className="export-option" onClick={() => setExportFormat('css')}>
            <FiFileText style={{ color: exportFormat === 'css' ? '#667eea' : '#6c757d' }} />
            <span style={{ color: exportFormat === 'css' ? '#667eea' : '#1a1a1a' }}>CSS</span>
          </div>
          <div className="export-option" onClick={() => setExportFormat('scss')}>
            <FiFileText style={{ color: exportFormat === 'scss' ? '#667eea' : '#6c757d' }} />
            <span style={{ color: exportFormat === 'scss' ? '#667eea' : '#1a1a1a' }}>SCSS</span>
          </div>
          <div className="export-option" onClick={() => setExportFormat('ase')}>
            <FiImage style={{ color: exportFormat === 'ase' ? '#667eea' : '#6c757d' }} />
            <span style={{ color: exportFormat === 'ase' ? '#667eea' : '#1a1a1a' }}>ASE</span>
          </div>
          <div className="export-option" onClick={() => setExportFormat('txt')}>
            <FiFileText style={{ color: exportFormat === 'txt' ? '#667eea' : '#6c757d' }} />
            <span style={{ color: exportFormat === 'txt' ? '#667eea' : '#1a1a1a' }}>TXT</span>
          </div>
        </div>
      </div>

      <div style={{ display: 'flex', gap: '8px' }}>
        <button
          className="action-btn primary"
          onClick={handleExport}
          style={{ flex: 1 }}
        >
          <FiDownload />
          Export {exportFormat.toUpperCase()}
        </button>
        <button
          className="action-btn secondary"
          onClick={copyToClipboard}
        >
          <FiCopy />
          Copy
        </button>
      </div>

      <div style={{ marginTop: '16px', fontSize: '12px', color: '#6c757d' }}>
        <strong>Export includes:</strong> {colors.length} colors, metadata, and usage examples
      </div>
    </div>
  );
}
